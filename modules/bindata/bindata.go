// Code generated by go-bindata.
// sources:
// conf/app.ini
// conf/locale/locale_en-GB.ini
// conf/locale/locale_pt-BR.ini
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppIni = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x54\xff\x6e\xe2\x46\x10\xfe\x7f\x9f\x62\x4b\x75\x6d\xae\x4a\xc0\x90\x0b\x77\x17\x14\xa9\xc6\x5e\x88\x1b\xdb\x6b\x79\x4d\x72\xb9\x08\x59\xc6\x5e\xc0\x3a\x63\x73\xde\x75\x11\xaf\xd4\xd7\xe8\x8b\x75\xd6\x3f\x00\x5d\xcf\x20\x81\x67\x67\xbe\x9d\x99\xef\x9b\x79\x8b\xf6\xfb\x25\x72\x75\x87\xe0\x07\x7c\x38\x1c\xa6\x91\xe0\xc8\x24\xcc\xf0\x2d\x2f\xb0\xa8\x0b\x56\x65\xc2\xb2\xc0\x42\x46\xa5\xc4\x11\x3e\xf0\x15\x04\xe1\x43\x2a\xb7\x78\x53\x64\x51\xbe\x41\xfe\xc2\x0d\x1d\x6a\x2a\x0c\x93\x3c\x23\xf4\x26\x78\xf9\x37\x2f\x97\xc8\xf3\x69\x40\x0d\x6a\x63\x38\xd9\x4a\xb9\x47\x26\x75\x74\xcb\xc5\x58\x19\xb4\x7e\xfd\x41\x8f\x41\xe0\x85\xba\x69\xfa\xf8\xa1\xf9\xef\x51\x3f\x80\xf3\xcf\xda\x67\x0d\xf9\x94\x06\xe1\xc2\xaf\x11\xde\x5d\x75\x78\xef\xc5\xfd\x60\xf0\xee\xaa\x41\x83\x97\x77\x57\xa7\xc0\xf7\x62\x80\x6c\x6a\xe8\x76\x78\x0a\x6d\xee\xbe\x8c\xf8\x31\xc0\xb4\x98\x3e\xb5\x09\x84\x2c\x02\xe2\x87\x36\x9d\x43\xd0\x3a\xca\xa0\x19\x06\xf1\x83\x70\x66\xd9\xaa\xb8\xb8\x12\xb2\xd8\x0d\x14\x9a\x18\xc4\xbc\x94\xfd\x3d\xdf\xa1\x27\xf2\xfa\x53\x87\x6f\xfc\x58\x9f\xb3\x40\x0f\x2c\xa3\x49\xc7\xd3\x83\x47\xf0\xeb\x0f\x90\xee\x79\xa1\xa9\x07\x7a\x67\x4a\x22\x19\x21\xe2\xd6\x69\xcc\xbf\x5a\x9e\x2a\x58\x96\x15\x47\x0b\xd7\xfa\x12\x32\x6a\x3c\x11\x08\x27\xbe\x63\x31\xd6\x10\x33\x1e\x8f\xa1\xd5\x2a\x6e\x05\x14\x2d\xd1\x04\x13\xe0\x84\x97\xb8\xb7\x3b\x8a\xef\x59\xef\x1a\xf7\xf6\x85\x90\x9b\x92\x8b\x1e\x2e\xc0\x0c\xc6\x54\xf2\x5b\x38\x48\xe5\xef\x02\x1f\x8b\xaa\xc4\xf1\xb6\x48\x63\xa0\x7c\x1a\x06\xaf\x9e\x2a\xa1\x0b\x41\x8f\x94\x29\x16\x86\xa3\x8f\x35\x4f\xc3\xfb\xbb\x0f\xb7\xa3\x4e\x2a\x25\x4f\xb2\x34\x87\xe4\x18\xf1\x2f\x83\x3c\x9d\xb1\x17\x13\x88\x44\x93\x33\x64\x9d\x0e\x9a\xfc\x0f\xf0\xf6\x56\x1b\x6b\x68\xf2\x03\xe4\xa4\xc5\xdc\x16\x3b\x21\x79\x94\xa0\x49\x07\x8a\x05\x8f\x4b\x2e\x01\x1b\xcf\x54\x3d\x17\xd5\xe5\xd9\xf1\x1a\xf3\xb6\xfc\x24\x15\xd1\x2a\xe3\xaa\x01\x25\xff\x5e\xa5\x25\x6f\xea\x07\x49\xa6\xeb\xe3\xcd\xba\xca\xb2\x1e\x62\xcc\xee\x34\xdb\xfa\x77\xb0\x5d\x9b\x70\x94\x27\xb8\x27\xd3\x64\x05\x48\x15\x0c\x41\xb4\x12\x45\x56\x49\x8e\xf7\x11\x68\xff\xb0\xe5\xb9\xea\x61\x37\x18\x02\x2b\xd5\xab\x66\x5e\x30\x3a\x68\xab\xea\x27\xab\x7a\x2c\xe2\xaa\x4c\xe5\x71\x89\x18\x31\x7c\xe0\x13\xa4\x83\xcf\xcf\x03\xfe\xe5\xd7\x3f\x67\x26\x79\xf1\xe1\xfb\xdb\x1f\x57\xa0\xe3\xb9\xe5\x86\x3e\x71\x88\x33\x05\x59\x9a\xfa\x2b\x53\x5e\x1f\x91\x41\xe9\x93\x45\x42\xd5\xa9\xba\x7b\x6d\x38\x0c\xf0\x8d\xba\x35\x8c\x0e\x5c\x14\x3b\xde\xf9\x9d\x10\xce\x83\xde\xf8\xa5\x39\x34\x34\x49\x55\xf1\x08\x56\x41\xba\x44\xba\x6d\xd3\x97\xd0\xf0\x29\x63\x61\x3b\xac\xad\x0e\xd1\x5b\x1c\xc5\x5b\xd0\x99\x6e\xea\x5e\x50\x53\xb4\xe3\xbb\xa2\x3c\x22\xcb\x85\xd7\x67\x5d\x0d\x1a\xf0\xd9\xd0\x0c\xee\xe9\xf0\x53\xbe\x44\xb6\xee\xce\x19\x9c\xf0\xfc\x66\x3e\xbd\xde\xcb\x9b\xa9\x5f\x8b\x48\xd9\x48\xbe\xc9\x52\xb1\xbd\xf6\x8a\x52\x56\x9b\xea\xdf\x7f\x04\x4e\x0a\x3c\x2d\x23\x91\x66\x08\x86\x83\x84\x33\xea\x3b\x4a\x34\x4e\x91\xe3\xbf\xa2\x1c\x8f\xf0\xf0\xee\x5e\xfb\x70\xaf\xdd\x61\x07\xae\x19\x69\xda\x58\xc9\x61\x21\x78\x82\xd7\x40\x1e\x54\xc5\x65\xba\xe3\xfb\x34\xfe\xc6\xcb\x26\x87\xbe\x32\xaa\x3d\xb5\x44\x90\xc4\xa2\x49\x06\xd5\x99\x28\xe9\xd6\x19\x41\xba\x59\x01\x0e\xad\x22\xe2\x22\x07\xaa\x39\x9a\x2e\x66\x33\xb5\x0f\x88\xea\xc2\x50\x83\x07\xd9\xe4\x99\xa8\x4a\x83\x32\x8a\x79\x13\xd6\x6f\xdd\x97\xdd\x61\x6b\x5e\xa7\x97\x36\x20\x13\x76\x00\xec\x02\xd2\x75\xd4\xd1\xbf\x84\xb6\xe5\xd6\xad\xa8\xc1\x01\x5e\xd9\x98\xf5\x95\x84\xec\xd1\x9a\xa9\xca\x47\x9f\xa0\x13\x96\xfd\xfa\x93\xd8\x5a\x0f\x4a\x0e\xa7\x2c\xf2\xf3\x75\x3e\x31\xa8\xeb\x12\x23\x08\x29\x2c\x67\x76\x5e\x68\xa7\x83\x93\xe5\xb4\xa5\x01\x3b\xde\xa3\x76\x15\x37\xa0\xe7\xf5\xd2\x01\x9b\xbe\xf5\xac\xd8\x47\x0a\x06\x7e\xfe\x0b\x00\x00\xff\xff\x19\x12\x3b\xb1\x43\x06\x00\x00")

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 1603, mode: os.FileMode(420), modTime: time.Unix(1484698348, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confLocaleLocale_enGbIni = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\xcf\x6a\xc3\x30\x0c\xc6\xef\x7e\x0a\xbd\x40\xf7\x06\x3b\x74\x97\xf6\xb0\xc1\xd8\x06\x3b\x94\x11\xe4\x44\x4b\x05\xa9\x65\x6c\x39\x79\xfd\xc9\x71\x43\x28\xec\x64\xf9\xd3\x9f\x8f\xef\x77\xc1\x18\x7f\x9c\xb2\x4e\x04\xcf\xb0\x2c\xcb\x0b\x66\x72\x03\xe5\x1e\xec\xff\xc9\xb7\x68\x8d\xac\xa9\xf4\x5a\x12\x81\x8a\x7d\x30\x29\x20\x7c\x93\x3f\xc6\x08\x0b\xeb\x15\x46\x99\x30\x8c\x80\x61\xb0\xf2\x70\xc3\x1e\x53\x92\xe0\x5c\x55\x0b\x8e\x94\x3b\x9c\x91\x27\xf4\xab\xcb\x2b\x37\x35\x64\x18\x38\x47\x09\x3c\x13\x67\xe7\x02\xce\x1e\x53\x77\x95\x5b\x9d\x3a\xdb\xb3\x49\xe8\xa5\xa8\x69\xc7\xfa\x6e\xe2\x68\xce\xc5\x9b\x7a\x62\x3d\x17\xef\xdc\xaf\x88\x52\xea\xa2\x9d\xae\x2e\x82\x03\xbc\x5b\xbd\xe9\x4a\x16\x06\xb5\xf6\xbe\xee\xa5\x73\x97\xea\xb6\x03\xa8\xa6\x6d\x69\x55\xba\x0a\x22\x71\x54\x96\xb0\xe3\x79\xe4\xd1\x27\xaa\x47\x31\x80\xa1\x9c\xb8\xc7\x75\x78\x21\xff\x80\xa6\x64\x0b\x0d\x27\x39\xbc\xdd\xe1\x3c\x99\xf7\x1a\x6b\x37\x6f\xe9\xfe\x33\xfe\x20\xcb\xd2\x20\xb4\x7b\xb6\xfd\x17\x00\x00\xff\xff\xd6\x2f\x92\x67\xba\x01\x00\x00")

func confLocaleLocale_enGbIniBytes() ([]byte, error) {
	return bindataRead(
		_confLocaleLocale_enGbIni,
		"conf/locale/locale_en-GB.ini",
	)
}

func confLocaleLocale_enGbIni() (*asset, error) {
	bytes, err := confLocaleLocale_enGbIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/locale/locale_en-GB.ini", size: 442, mode: os.FileMode(420), modTime: time.Unix(1484696856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confLocaleLocale_ptBrIni = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x41\x6a\xf3\x40\x0c\x85\xf7\x3a\x85\x2e\x90\xff\x06\xd9\xfc\x5d\xa4\x8b\x14\x02\x2d\x74\x11\x8a\xd1\x38\xaa\x23\xb0\x47\xc3\x8c\x26\x3e\x50\x17\x3d\x48\x2e\x56\x8d\x93\x90\x40\xbb\xb1\x35\x4f\x42\x7a\xef\xdb\x53\x4a\x1f\x60\x62\x23\xe3\x1a\xe7\x79\xfe\x4f\x85\xe1\xc0\xa5\x47\x7f\xbf\xca\x94\x46\x2e\xc8\xc5\x72\xb5\x9a\x09\x13\xf9\xa7\xd7\x89\x7b\xca\xed\x8f\xef\x1c\x76\x34\xf0\x52\x0f\x3a\x52\x1c\x90\xbd\x58\x4d\xe4\x13\x59\x23\x40\xd3\xaa\x8f\x94\x8e\x4e\x24\x23\x85\xe5\xd4\x56\x2e\x6a\x2c\x78\x90\x92\x34\xca\x89\xa5\x00\x44\x3a\x05\xca\xdd\xd1\x4f\xf8\xd4\x2e\x4b\xec\x25\xd1\x78\xd3\x29\x68\xb5\xe6\x4c\x43\xe6\x9b\x38\x88\x1d\x6b\x70\x75\x23\xf6\x5c\x03\xc0\xa7\xaa\x71\xee\x52\x33\xb6\xc6\x27\x37\xc2\x03\x4d\x1c\x4d\x6f\x2d\x63\x4f\x46\xd6\xda\x6f\xd7\x12\x60\xdf\xae\xde\x69\x78\x2e\x89\xf4\xe0\x61\x69\x74\x0d\x4e\x96\x64\xa2\xf1\x8e\xec\x17\xa2\x2c\x0e\xa8\x4e\x84\x0e\x78\x94\x9e\xce\xdf\xe7\x2f\xc5\x99\xc3\x23\xa9\x5a\x28\x1e\x14\x37\xba\x7a\xb9\xe2\xfa\xe7\x2e\x96\x8c\x77\x1b\x97\xa8\x7f\xdd\xde\xb2\xd0\xa5\xed\x2b\xda\x42\x80\x9f\x00\x00\x00\xff\xff\x0f\x2b\xfb\xdc\xd0\x01\x00\x00")

func confLocaleLocale_ptBrIniBytes() ([]byte, error) {
	return bindataRead(
		_confLocaleLocale_ptBrIni,
		"conf/locale/locale_pt-BR.ini",
	)
}

func confLocaleLocale_ptBrIni() (*asset, error) {
	bytes, err := confLocaleLocale_ptBrIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/locale/locale_pt-BR.ini", size: 464, mode: os.FileMode(420), modTime: time.Unix(1484696856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.ini": confAppIni,
	"conf/locale/locale_en-GB.ini": confLocaleLocale_enGbIni,
	"conf/locale/locale_pt-BR.ini": confLocaleLocale_ptBrIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{confAppIni, map[string]*bintree{}},
		"locale": &bintree{nil, map[string]*bintree{
			"locale_en-GB.ini": &bintree{confLocaleLocale_enGbIni, map[string]*bintree{}},
			"locale_pt-BR.ini": &bintree{confLocaleLocale_ptBrIni, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

