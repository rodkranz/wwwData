// Code generated by go-bindata.
// sources:
// conf/app.ini
// conf/locale/locale_en-GB.ini
// conf/locale/locale_pt-BR.ini
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\xd1\x6e\xe3\x36\x10\x7c\xdf\xaf\xd8\xa2\x48\x91\x14\x97\x58\x09\x7a\xee\x5d\x0a\x01\xa5\x25\xda\x51\x23\x89\x02\x49\x27\x97\x33\x04\x82\x51\x18\x47\x88\x2c\x09\x12\x5d\x23\xbf\xd4\xdf\xe8\x8f\x15\x94\x6c\x27\x28\xce\x7e\x11\x86\x3b\xc3\xd9\xdd\xe1\x4a\xb7\x6d\x0e\x29\x49\x28\xfa\xb8\xdb\xed\x66\xba\x37\x10\x52\x11\xf0\x28\x93\x11\x4b\xd1\x47\x07\xa1\x6d\xb0\xb7\xba\xb3\xa8\x71\x67\x1e\x75\xdb\xe2\xae\xb4\x2f\xb8\x6e\x2a\x5d\xaf\x01\x56\xbd\xe9\xfe\x36\x5d\x0e\x19\x67\x92\x05\x2c\x46\xf4\xf1\xc5\xda\x16\x42\x96\x90\x28\x45\x74\x80\x77\x31\xfc\xe1\x46\xca\x4c\x91\x30\xe4\xe8\x8f\xdf\x19\xe3\x12\x7d\xfc\xea\x7d\xf5\x80\x33\x26\xd5\x92\x0f\x0a\x27\xa7\x07\xbd\xb3\xfe\x7a\x32\x39\x39\x1d\xd5\xce\xfa\xeb\x93\xd3\x23\xf1\xac\x9f\x40\xcc\x02\x12\xab\x23\x75\xbc\xfb\x23\xe3\xff\x84\x30\x12\x64\x16\x53\xc5\xd9\x52\x52\xae\x62\xb6\x40\x1f\x9f\x75\xd5\x1b\x08\x28\x97\x6a\x1e\xc5\x6e\x22\xc5\xb6\xb7\xcd\x66\xe2\xd4\xfa\x49\x61\x3a\x7b\xd1\x9a\x0d\xdc\xd2\x87\x1f\x16\xbc\x9a\xb7\xe1\x5c\x48\x22\xa3\x60\xb4\x93\x11\x79\x83\x3e\x5e\x4c\x80\x64\x99\x0a\x89\x24\x07\xe8\x49\x5b\x0d\x34\x1d\x6c\x2c\xbe\x47\x99\x6b\xd8\x76\x5b\x03\xcb\x34\xfa\xa6\x04\x0b\x6e\xa9\x54\x19\xe5\x49\x24\xc4\xb8\x89\xe9\x74\x3a\x8c\xba\xd8\x76\xa5\x7d\xcb\x41\xd0\x80\x53\xa9\x6e\xe9\x03\xbe\xff\x7c\xfc\xe9\xe7\x3f\xe7\x21\xbd\xe7\xf4\x9e\xff\xf2\xeb\x29\xc4\x6c\x11\xa5\x8a\xd3\x84\x26\x33\xca\x55\x48\x1e\x84\xab\xfa\x1d\x02\xc6\x6e\x23\xaa\x96\x82\xf2\x21\x00\x7b\xfa\xb6\xb2\x9d\x56\x56\x57\xaf\x4a\xef\x4c\xdf\x6c\xcc\xa1\xf2\xa8\xb1\xcf\xcb\x87\xca\xb2\x2e\x3a\xf3\x54\x3e\x56\x06\x60\xa5\xdb\x32\x07\x12\xc7\xec\x5e\x05\x9c\x09\xa1\xf6\x21\xd8\xf7\x07\xab\x42\x17\x2f\x26\x07\x12\x92\x4c\x52\x8e\x3e\x6e\xcc\xa6\xe9\xde\x20\x4a\x25\xe5\x77\xc4\x2d\x70\xea\xc1\x0d\x13\x12\x7d\x80\x55\x79\xf9\xa5\xce\x21\x26\xe9\x42\xa0\x8f\xa6\x3e\x5f\xcc\x3e\xb5\xf6\x7c\xc6\x87\xe0\x3a\x8c\xd6\xeb\xaa\xec\x5f\x3e\x65\x4d\x67\xb7\xeb\xed\xbf\xff\xf4\xf8\xd4\xe0\xac\xd3\x7d\x59\x41\x48\x24\x55\x73\xc6\x13\x97\xb1\xa4\xa9\xf1\x2f\x5d\xe3\x15\x5e\x7e\xbe\xf6\x7e\xbb\xf6\x3e\x63\x22\x24\x5e\x79\xde\x14\xe0\x0f\x5c\xf6\xe6\x09\x9f\x9b\xce\x6d\xc7\xd8\x72\x63\xda\xb2\x78\x35\xdd\xe8\xe1\xc2\x81\x2e\xf0\x39\x98\xfa\x7c\x39\x9a\x81\xc1\x09\xfa\x38\x3a\x02\x58\x55\xcd\x3a\x87\x84\x85\x43\x3e\x9a\xba\x6f\x2a\x03\xb3\xe5\x7c\xee\x72\x46\xdd\x14\x2e\x3d\xcf\xf3\x20\xa6\x77\xd4\x75\x2a\x3b\x5d\x98\x91\x76\xb1\x2f\xcf\x0f\x87\x7b\xf8\xb9\xfc\x88\xc5\x6c\xa1\x38\x93\x44\xd2\xc3\x44\x13\xf2\x4d\xc5\x51\x3a\x8c\x62\x10\xf7\xbc\x01\x13\xd1\x77\xaa\xc4\x4d\x34\x77\x9d\x5f\x7d\x81\x90\x44\xf1\xc3\x0f\xb8\x43\x26\x5c\x24\x8e\x2e\xea\xf7\xeb\x38\x0d\x58\x9a\xd2\x40\x2a\x96\xaa\x44\xbc\x3f\x94\xe3\xc1\x11\x39\xbe\x7e\x1f\x6d\xd1\xc2\xfe\x89\x8f\xa2\x2e\xee\x8f\xba\xff\xd0\x47\xc8\xa3\x3b\xb7\x7d\x70\x32\xe8\xc3\x7f\x01\x00\x00\xff\xff\x23\x37\x54\xf2\x8c\x04\x00\x00")

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 1164, mode: os.FileMode(420), modTime: time.Unix(1483105881, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confLocaleLocale_enGbIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xc1\x6a\xc3\x30\x0c\x40\xef\xfa\x0a\xfd\x40\xfb\x07\x39\x74\x97\xf6\xb0\xc1\xd8\x06\x3b\x94\x11\xe4\x44\x73\x05\x8e\x65\x6c\xb9\xf9\xfd\xe1\xa4\x21\x14\x76\x4a\x78\x51\xf4\xd0\xbb\x52\x4a\x3f\x60\x62\x81\xb1\xc3\x79\x9e\x5f\xa8\x30\x8c\x5c\x06\xc4\x0e\x3f\x65\x4a\x81\xb1\x58\xae\x83\xd5\xcc\x68\x8a\xc5\x28\x1b\x12\x7e\xb3\x3b\xa5\x84\xb3\xd8\x0d\xbd\x06\x8a\x1e\x29\x8e\xe8\xf5\x30\xd1\x40\x39\x6b\x04\x68\xb4\x92\xe7\xd2\xd3\x9d\x24\x90\x5b\x2c\xaf\xb2\xd2\x58\x70\x94\x92\x34\xca\x9d\xa5\x00\x44\xba\x3b\xca\xfd\x4d\xa7\x36\x75\xd1\x89\x37\x44\x4e\xab\x61\x87\xa7\xf6\xdc\xa0\x17\xbb\x55\x87\x1d\x9e\xc5\x2e\xd5\x01\xfc\xaa\x1a\xe7\x3e\x91\x5f\x2c\x4a\x23\xbe\x93\xe7\x8d\x1b\x4f\x29\x90\xb5\x6f\x5f\x8f\x57\x80\x6b\xb3\xed\x01\x9a\x74\xfd\x69\x21\x7d\x0b\x91\x25\x99\x68\xdc\xf3\x3c\xf7\x18\x32\xb7\xa5\x14\x91\x52\x0a\x32\xd0\x32\x3c\xb3\x7b\x4a\x53\x8b\x44\x8f\x67\x3d\xbc\x3d\xe2\x1c\x01\xae\xcb\x59\xbb\x7c\xbd\xee\x3f\xf1\x07\xd3\x88\x6b\x84\x75\xdf\x11\xe0\x2f\x00\x00\xff\xff\xd6\x2f\x92\x67\xba\x01\x00\x00")

func confLocaleLocale_enGbIniBytes() ([]byte, error) {
	return bindataRead(
		_confLocaleLocale_enGbIni,
		"conf/locale/locale_en-GB.ini",
	)
}

func confLocaleLocale_enGbIni() (*asset, error) {
	bytes, err := confLocaleLocale_enGbIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/locale/locale_en-GB.ini", size: 442, mode: os.FileMode(420), modTime: time.Unix(1483109088, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confLocaleLocale_ptBrIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x6a\x23\x31\x10\x45\xf7\x3a\x45\x5d\xc0\x73\x83\xde\xcc\x2c\x3c\x0b\x0f\x18\x26\x90\x85\x09\xcd\x57\xbb\x22\x17\xb4\x54\xa2\x24\xb9\x0f\x94\x45\x0e\xe2\x8b\x05\xb5\x6d\x6c\x48\x56\x2a\xfe\x17\xf5\x7f\xbd\x03\x72\x7e\x73\x55\xea\xcc\x34\xd0\xb2\x2c\xbf\x51\xd8\x1d\xb9\x4c\x44\x03\xfd\x97\x98\x67\x2e\xc4\xa5\x5a\xab\xcd\x40\x19\x06\x9a\x34\xf2\x04\xeb\x2f\xbd\xb2\xdf\x23\xf0\x3a\x07\x9d\x91\x02\x31\x05\xdd\x44\x4c\x30\xd3\xe4\x5c\xd7\x1a\x02\x97\x11\x67\xc8\x0c\xbf\x46\xed\xe4\xaa\xa6\x42\x47\x29\x59\x93\x9c\x59\x8a\x73\x09\x67\x0f\x1b\x4f\x1a\xfb\xaf\xbd\x49\x9a\x24\x63\xbe\xeb\xf0\xda\x6a\x6f\xa6\xde\xf8\x2e\x06\xa9\xa7\xe6\x69\xa0\xad\xd4\xbf\xcd\x3b\xf7\xae\x5a\xd9\xc6\xdc\x8b\x0d\xf4\x07\x66\x1c\x10\x39\x55\xbd\x5b\x95\x63\x9e\x51\xbb\xfd\x72\x1b\x9d\x3b\xf4\xd4\x07\x8d\x3d\x82\x24\x3c\x75\x58\x8d\xb1\xc3\x31\xc9\x55\x34\x3d\x90\x7d\x43\x64\x02\xa3\x16\x41\xc8\x79\x96\x09\x97\xcf\xcb\x87\xd2\xc2\xfe\x99\x54\x2b\x48\x47\xa5\xad\x6e\xfe\xdd\x70\xfd\x72\xee\xb0\xde\xf8\xa8\x71\x3d\xf5\xa7\xec\x1d\x0b\xae\x36\x6d\xd7\x85\xce\x7d\x05\x00\x00\xff\xff\x0f\x2b\xfb\xdc\xd0\x01\x00\x00")

func confLocaleLocale_ptBrIniBytes() ([]byte, error) {
	return bindataRead(
		_confLocaleLocale_ptBrIni,
		"conf/locale/locale_pt-BR.ini",
	)
}

func confLocaleLocale_ptBrIni() (*asset, error) {
	bytes, err := confLocaleLocale_ptBrIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/locale/locale_pt-BR.ini", size: 464, mode: os.FileMode(420), modTime: time.Unix(1483109084, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.ini":                 confAppIni,
	"conf/locale/locale_en-GB.ini": confLocaleLocale_enGbIni,
	"conf/locale/locale_pt-BR.ini": confLocaleLocale_ptBrIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{confAppIni, map[string]*bintree{}},
		"locale": &bintree{nil, map[string]*bintree{
			"locale_en-GB.ini": &bintree{confLocaleLocale_enGbIni, map[string]*bintree{}},
			"locale_pt-BR.ini": &bintree{confLocaleLocale_ptBrIni, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
